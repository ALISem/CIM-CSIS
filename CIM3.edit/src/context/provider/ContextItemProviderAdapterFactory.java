/**
 */
package context.provider;

import context.util.ContextAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContextItemProviderAdapterFactory extends ContextAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContextItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.ContextElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextElementItemProvider contextElementItemProvider;

	/**
	 * This creates an adapter for a {@link context.ContextElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextElementAdapter() {
		if (contextElementItemProvider == null) {
			contextElementItemProvider = new ContextElementItemProvider(this);
		}

		return contextElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link context.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.ContextModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextModelItemProvider contextModelItemProvider;

	/**
	 * This creates an adapter for a {@link context.ContextModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextModelAdapter() {
		if (contextModelItemProvider == null) {
			contextModelItemProvider = new ContextModelItemProvider(this);
		}

		return contextModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Refinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefinementItemProvider refinementItemProvider;

	/**
	 * This creates an adapter for a {@link context.Refinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefinementAdapter() {
		if (refinementItemProvider == null) {
			refinementItemProvider = new RefinementItemProvider(this);
		}

		return refinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Causal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalItemProvider causalItemProvider;

	/**
	 * This creates an adapter for a {@link context.Causal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalAdapter() {
		if (causalItemProvider == null) {
			causalItemProvider = new CausalItemProvider(this);
		}

		return causalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Support} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportItemProvider supportItemProvider;

	/**
	 * This creates an adapter for a {@link context.Support}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportAdapter() {
		if (supportItemProvider == null) {
			supportItemProvider = new SupportItemProvider(this);
		}

		return supportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Acquisition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquisitionItemProvider acquisitionItemProvider;

	/**
	 * This creates an adapter for a {@link context.Acquisition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquisitionAdapter() {
		if (acquisitionItemProvider == null) {
			acquisitionItemProvider = new AcquisitionItemProvider(this);
		}

		return acquisitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.ContextSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextSourceItemProvider contextSourceItemProvider;

	/**
	 * This creates an adapter for a {@link context.ContextSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextSourceAdapter() {
		if (contextSourceItemProvider == null) {
			contextSourceItemProvider = new ContextSourceItemProvider(this);
		}

		return contextSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Static} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticItemProvider staticItemProvider;

	/**
	 * This creates an adapter for a {@link context.Static}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticAdapter() {
		if (staticItemProvider == null) {
			staticItemProvider = new StaticItemProvider(this);
		}

		return staticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Profiled} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProfiledItemProvider profiledItemProvider;

	/**
	 * This creates an adapter for a {@link context.Profiled}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProfiledAdapter() {
		if (profiledItemProvider == null) {
			profiledItemProvider = new ProfiledItemProvider(this);
		}

		return profiledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Derived} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedItemProvider derivedItemProvider;

	/**
	 * This creates an adapter for a {@link context.Derived}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedAdapter() {
		if (derivedItemProvider == null) {
			derivedItemProvider = new DerivedItemProvider(this);
		}

		return derivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Sensed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensedItemProvider sensedItemProvider;

	/**
	 * This creates an adapter for a {@link context.Sensed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensedAdapter() {
		if (sensedItemProvider == null) {
			sensedItemProvider = new SensedItemProvider(this);
		}

		return sensedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Conflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConflictItemProvider conflictItemProvider;

	/**
	 * This creates an adapter for a {@link context.Conflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConflictAdapter() {
		if (conflictItemProvider == null) {
			conflictItemProvider = new ConflictItemProvider(this);
		}

		return conflictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Parallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelItemProvider parallelItemProvider;

	/**
	 * This creates an adapter for a {@link context.Parallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link context.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Characterization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacterizationItemProvider characterizationItemProvider;

	/**
	 * This creates an adapter for a {@link context.Characterization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacterizationAdapter() {
		if (characterizationItemProvider == null) {
			characterizationItemProvider = new CharacterizationItemProvider(this);
		}

		return characterizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Atomic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicItemProvider atomicItemProvider;

	/**
	 * This creates an adapter for a {@link context.Atomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicAdapter() {
		if (atomicItemProvider == null) {
			atomicItemProvider = new AtomicItemProvider(this);
		}

		return atomicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Composite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeItemProvider compositeItemProvider;

	/**
	 * This creates an adapter for a {@link context.Composite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAdapter() {
		if (compositeItemProvider == null) {
			compositeItemProvider = new CompositeItemProvider(this);
		}

		return compositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Congnitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CongnitiveItemProvider congnitiveItemProvider;

	/**
	 * This creates an adapter for a {@link context.Congnitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCongnitiveAdapter() {
		if (congnitiveItemProvider == null) {
			congnitiveItemProvider = new CongnitiveItemProvider(this);
		}

		return congnitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Social} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocialItemProvider socialItemProvider;

	/**
	 * This creates an adapter for a {@link context.Social}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocialAdapter() {
		if (socialItemProvider == null) {
			socialItemProvider = new SocialItemProvider(this);
		}

		return socialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Physical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalItemProvider physicalItemProvider;

	/**
	 * This creates an adapter for a {@link context.Physical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalAdapter() {
		if (physicalItemProvider == null) {
			physicalItemProvider = new PhysicalItemProvider(this);
		}

		return physicalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link context.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Temporal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalItemProvider temporalItemProvider;

	/**
	 * This creates an adapter for a {@link context.Temporal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalAdapter() {
		if (temporalItemProvider == null) {
			temporalItemProvider = new TemporalItemProvider(this);
		}

		return temporalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Past} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PastItemProvider pastItemProvider;

	/**
	 * This creates an adapter for a {@link context.Past}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPastAdapter() {
		if (pastItemProvider == null) {
			pastItemProvider = new PastItemProvider(this);
		}

		return pastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Current} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurrentItemProvider currentItemProvider;

	/**
	 * This creates an adapter for a {@link context.Current}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurrentAdapter() {
		if (currentItemProvider == null) {
			currentItemProvider = new CurrentItemProvider(this);
		}

		return currentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Future} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FutureItemProvider futureItemProvider;

	/**
	 * This creates an adapter for a {@link context.Future}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFutureAdapter() {
		if (futureItemProvider == null) {
			futureItemProvider = new FutureItemProvider(this);
		}

		return futureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Computing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingItemProvider computingItemProvider;

	/**
	 * This creates an adapter for a {@link context.Computing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingAdapter() {
		if (computingItemProvider == null) {
			computingItemProvider = new ComputingItemProvider(this);
		}

		return computingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link context.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link context.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Identify} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifyItemProvider identifyItemProvider;

	/**
	 * This creates an adapter for a {@link context.Identify}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifyAdapter() {
		if (identifyItemProvider == null) {
			identifyItemProvider = new IdentifyItemProvider(this);
		}

		return identifyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Preference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreferenceItemProvider preferenceItemProvider;

	/**
	 * This creates an adapter for a {@link context.Preference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreferenceAdapter() {
		if (preferenceItemProvider == null) {
			preferenceItemProvider = new PreferenceItemProvider(this);
		}

		return preferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.TimeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeConstraintItemProvider timeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link context.TimeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeConstraintAdapter() {
		if (timeConstraintItemProvider == null) {
			timeConstraintItemProvider = new TimeConstraintItemProvider(this);
		}

		return timeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Fixed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedItemProvider fixedItemProvider;

	/**
	 * This creates an adapter for a {@link context.Fixed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedAdapter() {
		if (fixedItemProvider == null) {
			fixedItemProvider = new FixedItemProvider(this);
		}

		return fixedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Relative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelativeItemProvider relativeItemProvider;

	/**
	 * This creates an adapter for a {@link context.Relative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelativeAdapter() {
		if (relativeItemProvider == null) {
			relativeItemProvider = new RelativeItemProvider(this);
		}

		return relativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Validity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidityItemProvider validityItemProvider;

	/**
	 * This creates an adapter for a {@link context.Validity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidityAdapter() {
		if (validityItemProvider == null) {
			validityItemProvider = new ValidityItemProvider(this);
		}

		return validityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Focus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FocusItemProvider focusItemProvider;

	/**
	 * This creates an adapter for a {@link context.Focus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFocusAdapter() {
		if (focusItemProvider == null) {
			focusItemProvider = new FocusItemProvider(this);
		}

		return focusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link context.Relevance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelevanceItemProvider relevanceItemProvider;

	/**
	 * This creates an adapter for a {@link context.Relevance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelevanceAdapter() {
		if (relevanceItemProvider == null) {
			relevanceItemProvider = new RelevanceItemProvider(this);
		}

		return relevanceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (contextElementItemProvider != null) contextElementItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (contextModelItemProvider != null) contextModelItemProvider.dispose();
		if (refinementItemProvider != null) refinementItemProvider.dispose();
		if (causalItemProvider != null) causalItemProvider.dispose();
		if (supportItemProvider != null) supportItemProvider.dispose();
		if (acquisitionItemProvider != null) acquisitionItemProvider.dispose();
		if (contextSourceItemProvider != null) contextSourceItemProvider.dispose();
		if (staticItemProvider != null) staticItemProvider.dispose();
		if (profiledItemProvider != null) profiledItemProvider.dispose();
		if (derivedItemProvider != null) derivedItemProvider.dispose();
		if (sensedItemProvider != null) sensedItemProvider.dispose();
		if (conflictItemProvider != null) conflictItemProvider.dispose();
		if (parallelItemProvider != null) parallelItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (characterizationItemProvider != null) characterizationItemProvider.dispose();
		if (atomicItemProvider != null) atomicItemProvider.dispose();
		if (compositeItemProvider != null) compositeItemProvider.dispose();
		if (congnitiveItemProvider != null) congnitiveItemProvider.dispose();
		if (socialItemProvider != null) socialItemProvider.dispose();
		if (physicalItemProvider != null) physicalItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (temporalItemProvider != null) temporalItemProvider.dispose();
		if (pastItemProvider != null) pastItemProvider.dispose();
		if (currentItemProvider != null) currentItemProvider.dispose();
		if (futureItemProvider != null) futureItemProvider.dispose();
		if (computingItemProvider != null) computingItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (identifyItemProvider != null) identifyItemProvider.dispose();
		if (preferenceItemProvider != null) preferenceItemProvider.dispose();
		if (timeConstraintItemProvider != null) timeConstraintItemProvider.dispose();
		if (fixedItemProvider != null) fixedItemProvider.dispose();
		if (relativeItemProvider != null) relativeItemProvider.dispose();
		if (validityItemProvider != null) validityItemProvider.dispose();
		if (focusItemProvider != null) focusItemProvider.dispose();
		if (relevanceItemProvider != null) relevanceItemProvider.dispose();
	}

}
